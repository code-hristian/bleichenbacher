Snippets to generate RSA-Key-Pairs with openssl:

OpenSSL-Tool: Usually you can find openssl in the Git installation directory or just use the git bash where it is already in the path. 

#generate file key with 1024-bit / 128 byte long rsa-key:
openssl genrsa -out key 1024

#View the created RSA-key-components with openssl:
openssl pkey -in key -text

(The Tool rsautl is depricated becaus it only use the direct RSA-Algorithm => good for PKCS1_1.5 experiments)
You  can select which padding-sceme rsautl should use: PKCS#1 v1.5 (used as default), PKCS#1 OAEP, ANSI X9.31, or no padding with raw, respectively. 
rsautl ++ -pkcs or -oaep or -x931 or -raw

#Encrypt "hey" with PKCS1_1.5 (default): 
echo -ne 'hey' | openssl rsautl -encrypt -inkey key

echo -ne 'hey' | openssl rsautl -encrypt -inkey key | openssl rsautl -decrypt -inkey key

#test self padded PKCSV1 sting with rsautl -raw: 
perl -e 'print "\x00\x02" . "\x01"x100 . "\x00" . "\x74\x68\x69\x73\x20\x69\x73\x20\x61\x20\x73\x65\x63\x72\x65\x74\x20\x6d\x65\x73\x73\x61\x67\x65\x0a"' | openssl rsautl -encrypt -inkey key -raw

#test self padded PKCSV1 sting with rsautl -raw and decrypt wih key: 
perl -e 'print "\x00\x02" . "\x01"x100 . "\x00" . "\x74\x68\x69\x73\x20\x69\x73\x20\x61\x20\x73\x65\x63\x72\x65\x74\x20\x6d\x65\x73\x73\x61\x67\x65\x0a"' | openssl rsautl -encrypt -inkey key -raw | openssl rsautl -decrypt -inkey key

#test self wrong padded PKCSV1 sting with rsautl -raw and decrypt wih key to view Error-Msg.: padding check failed: 
perl -e 'print "\x00\x03" . "\x01"x100 . "\x00" . "\x74\x68\x69\x73\x20\x69\x73\x20\x61\x20\x73\x65\x63\x72\x65\x74\x20\x6d\x65\x73\x73\x61\x67\x65\x0a"' | openssl rsautl -encrypt -inkey key -raw | openssl rsautl -decrypt -inkey key
